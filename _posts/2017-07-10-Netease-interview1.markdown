---
layout:     post
title:      "记一次网易游戏面试经历"
subtitle:   "第一次...面试"
date:       2017-07-10 23:00:00
author:     "Damon To"
header-img: "img/NeteaseInterview01"
header-mask: 0.6
catalog:    true
tags:
    - 闲谈
    - 面试
---

> 大二暑假之前做了许多的暑假设想：学习python、了解人工智能和机器学习、学一学 Unity3D shader、补听完上半年落下的新专辑...虽然按照以往的经验这些计划往往都会泡汤，但是单单是这样一想，也可以说是野心勃勃了。在众多设想里面，唯独没有考虑过“实习”这件事，似乎心里把它默认为大三才应该做的事。后来，和一个同校的师姐聊天的时候聊到暑假和实习的事，被怂恿去找实习。于是回到宿舍后闲着没事在实习僧平台上看了几眼，发现了几个还蛮感兴趣的公司和岗位，然后转念一想觉得其实实习也不错，于是便开始深入地物色对比各种实习招聘以及准备简历。

## 面试前准备

首先是准备简历了，第一次写简历不知道从何下手，在网上找了个 html 版的简历，修修改改就变成了自己的简历了。后来发现用 html 写简历还是略有点不方便，主要是要转化成 pdf 时总会出现 css 样式丢失、链接丢失等等问题。找了许多办法，最后还是 chrome 大法好，找到了 **FireShot** 这个 chrome 插件，完美转化 html 为 pdf，简历搞定。

接着发现了网易游戏的引擎开发实习生这个岗位，大致看了一下 jd ，大概就是 c++/ lua/ cocos2dx/ u3d 这一类的方向，觉得和自己的技术栈还是较为贴合的，于是就在7月4号将简历投给了网易游戏。很快，隔天 hr 就来联系面试了，二面时间定在7月6号。这个二面的形式其实就相当于**笔试+技术面**了，做完笔试如果笔试成绩过了的话直接进行技术面。当时由于之前的一段时间都在准备期末考试，完全没有看过技术面试和笔试相关的内容，心想八成是要裸面了，心里开始有点忐忑，大概就是**“要是笔试一道题都做不出就尴尬了”**那种心态。

忐忑归忐忑，虽然只有一天左右的时间准备，但是还是要尽量准备吧。首先由于是第一次职场面试，在面试礼仪之类还是要多做功课，于是在知乎和掘金刷了一堆面试经验和面试禁忌。后来发现其实对于软件开发行业来说，面试环境都是相对轻松的，所以有些面试细节并不是想象中那么重要，只要表现得比较礼貌，着装整洁基本就没有什么大的问题。

然后再看了一下数据结构课的笔记，大致看了下重要的基础排序查找算法，温习一下 c++ 基本语法。最后在看了十来道“技术面试高频题”，看了一下之前 unity3d 项目的项目总结，然后就去面试了。

## 笔试

提前15分钟到达网易游戏，下午2点30笔试准时开始。拿到试卷大致扫描了一遍，长吁一口气：三道逻辑题有一道是比较熟悉的，另外两道不熟悉的感觉难度不大，编程题感觉也不是很不友好，至少不会像之前担心的那样一道题也做不出了。下面分享一下题目：

### Part1 - 逻辑题

> 1.有一场体育比赛中,共有N个项目,有运动员1号,2号,3号参加.在每一个比赛项目中,第一,第二,第三名分别得A,B,C分,其中A,B,C为正整数,且A>B>C.最后1号选手共得22分,2号与3号均得9分,并且2号在百米赛中取得第一.最后,求N的值,并分析出谁在跳高中得第二名.

分析思路应该不止一种，最简单粗暴地方法就是将N从小到大列举所有可能情况了，面试时我就是直接这样解决，也并没有耗费许多时间。另外一种方法，从总分入手，三个人总分40分，40=5×8=4×10=2×20=1×20,不难得出项目数只能是5，即N=5。将5代入计算答案很快就出来了。

> 2.假设河的同一侧有警察、强盗、路人A、路人A的两个孩子（A1，A2）、路人B、路人B的两个孩子（B1、B2），他们想要安全过河，限制条件如下：
> 1、假设警察不在，强盗会杀死所有的跟他在一起的人
> 2、假设路人A离开，路人B和路人A的孩子在一起，路人A的孩子会死掉
> 3、假设路人B离开，路人A和路人B的孩子在一起，路人B的孩子会死掉
> 4、河面上有一条船，但一次最多可以容纳两人过河
> 5、只有警察、路人A、路人B会划船
> 请给出你的过河方案。

恶魔与牧师过河问题的升级版。虽然之前做过[恶魔与牧师小游戏](https://damondu.github.io/2017/06/01/unity3D-learn1/)，但是还是在这道题上耗费了挺多时间。一步步逻辑推演之后做出来的体会是，**推理的方向性很重要**，因为这种问题往往前面的步骤走错后面的思考就完全作废。下面总结一下当时自己的思考过程：

首先，为方便设警察为 P ，强盗为 Q。先分析 PQ，首先可以肯定的是**在一般情况下， PQ 是要绑定的**，因为只要 P 与 Q 一分离就会发生规则 1 的失败。但是**存在两种特殊情况**：“Q 单独在右岸” 与 “Q 单独在左岸”。很明显，**这两种情况只会分别出现在运输的开始和结束**，因为只有在开始的时候才可能出现 “Q 单独在右岸”这种情况，也只有在结束才可能出现 “Q 单独在左岸”这种情况。这两个特殊情况应该是会用到的。

接着，由于 PQ 大多数时间是绑定，所以**不妨先假设 PQ 不存在**，单独分析A A1 A2 B B1 B2。在恶魔与牧师小游戏的解决过程中，有个小技巧就是：**从一个必然出现的中间态出发往两边思考，往往可以带来便利。**对于这道题的情景，必然达到的中间态应该是下图所展示的这种情况：

![](http://ompnv884d.bkt.clouddn.com/NeteaseGameInterviewExperience1.png-w500)

**接下来我们只需解决：“怎么从开始态到中间态” 以及 “怎么从中间态到结束态” 这两个问题就可以了**。由于顺向逻辑比较容易实现，我们选择先解决“怎么从中间态到结束态”。通过简单的列举和推演，我们可以发现如果没有 PQ 的加入的话总是会陷入江局：在 A 运输第二个孩子的时候无论采取什么措施都会导致 A 或 B 的孩子死亡。此时我们联系 PQ 的两种特殊情况，很容易想到，**只要让 P 来运输第二个孩子问题就迎刃而解了**。如下：

![](http://ompnv884d.bkt.clouddn.com/NeteaseGameInterviewExperience2.png-w500)

![](http://ompnv884d.bkt.clouddn.com/NeteaseGameInterviewExperience3.png-w500)

到这里思路已经很明朗，“怎么从开始态到中间态” 的解决方法是和 “怎么从中间态到结束态”相似的(镜像对称的)，只要调整一些解决过程就可以，最终的过河方案如下： 

![](http://ompnv884d.bkt.clouddn.com/NeteaseGameInterviewExperience4.png-w500)

>  3.一只狐狸在追一只鸭子，鸭子逃到了一个正圆形池塘的圆心O位置，狐狸不会游泳，鸭子也不能在水面上起飞，狐狸奔跑的速度是鸭子游泳速度的4倍。假设鸭子和狐狸分别遵循着最优的逃跑和追逐策略，请问：鸭子能不能安全地游到池塘边并起飞？如果能，如何才能做到？

由于逻辑题是三选二的选做题，所以这道题并没有做。乍一看觉得答案是不能，但是后来在网上查了下，发现答案是可以，而且这是一道百度面试的智力题来的，网上的解释如下：

设圆的半径是R，由已知鸭子的速度是V，狐狸的速度是4V，可以得知，当鸭子在距离圆心R/4之内（图中深色部分）围绕圆心做圆周运动时，角速度要大于狐狸。我们暂且假定它就在一个半径为R/4的小圆上围绕圆心游走，只要经过一段时间追赶，鸭子一定会游到这样一个位置，它在图中N点，狐狸在M点，既它和狐狸在同一条直径上，但位置在圆心的两边。

此时鸭子立即改为沿半径方向往岸边P点游，显然，它离岸边的距离为3R/4，它登岸需要的时间是3R/4V；而狐狸到P点的距离正好是半圆，即Rπ，狐狸需要的时间是Rπ/4V。因为π=3.14>3，所以鸭子先上岸，飞了。

### Part2 - 编程题

> 4.输入N，列出N个数的全排列(1 2 3 4 ... N)。要求：非递归实现。

笔试常见的题型，网上有许多讲解——[全排列各种实现(非递归、递归)](http://www.cnblogs.com/answeryi/archive/2011/10/12/2209058.html)。不加赘述。

最后一道编程题没有找到一模一样的中文原题，但是在 leetcode 上找到了英文原题——[335. Self Crossing](https://leetcode.com/problems/self-crossing/#/description)。

> 5.You are given an array x of n positive numbers. You start at point (0,0) and moves x[0] metres to the north, then x[1] metres to the west, x[2] metres to the south, x[3] metres to the east and so on. In other words, after each move your direction changes counter-clockwise.
>
> Write a one-pass algorithm with O(1) extra space to determine, if your path crosses itself, or not.

大概就是给了一个数组，按照数组顺序以上左下右的顺序移动一个点，判断点的路径是否会发生相交。当时我用了最简单的算法，遍历数组，得到横线集合与竖线集合，然后遍历两个线集合判断相交，时间复杂度o(n^2)。具体实现的话可以参考这一篇 Blog ——[还记得高中的向量吗？leetcode 335. Self Crossing(判断线段相交)](https://www.bbsmax.com/A/WpdKBKwm5V/)。

但是在 leetcode 上的 solutions 里面找到了更简单的方法，复杂度只有o(n) —— [Java Oms with explanation](https://leetcode.com/problems/self-crossing/#/solutions)，下面是实现代码：

```java
// Categorize the self-crossing scenarios, there are 3 of them: 
// 1. Fourth line crosses first line and works for fifth line crosses second line and so on...
// 2. Fifth line meets first line and works for the lines after
// 3. Sixth line crosses first line and works for the lines after
public class Solution {
    public boolean isSelfCrossing(int[] x) {
        int l = x.length;
        if(l <= 3) return false;
        
        for(int i = 3; i < l; i++){
            if(x[i] >= x[i-2] && x[i-1] <= x[i-3]) return true;  //Fourth line crosses first line and onward
            if(i >=4)
            {
                if(x[i-1] == x[i-3] && x[i] + x[i-4] >= x[i-2]) return true; // Fifth line meets first line and onward
            }
            if(i >=5)
            {
                if(x[i-2] - x[i-4] >= 0 && x[i] >= x[i-2] - x[i-4] && x[i-1] >= x[i-3] - x[i-5] && x[i-1] <= x[i-3]) return true;  // Sixth line crosses first line and onward
            }
        }
        return false;
    }
}
```

就如注释所解释的，其实**只需要判断第 i 条线是否和第 i+3 / i+4 / i+5 条线相交就可以**，而且如果是特定情况的相交判断的话，就不需要第一种方法中提到的向量法来判断，直接根据特定情况下坐标的位置就可以判断了，十分简洁的算法。

## 技术面

笔试完 HR 小姐姐让我们在公司的一个讨论室稍等十分钟等待笔试结果。由于是第一次笔试，做完之后其实也不知道自己发挥的算好算坏，最大的感觉是手写代码什么的很难受，写得十分潦草。总之忐忑地等了十分钟后，HR 小姐姐过来通知笔试通过了，接着进来了两个面试官，看样子应该是部门的技术负责人，然后面试立刻就开始了。

面试完的感觉是：**面试官很 nice，面试内容比想象中丰富。**除了自我介绍、项目介绍这些固定环节，还问了四五个技术方面的问题，大多数是关于游戏开发和游戏引擎的问题。另外还有一些关于产品和开发流程之类的问题也有所提及。问题的难度并不大，面试官应该是根据个人情况调整问题的难度，所以不必担心完全答不上的问题。这里列几个印象比较深刻的问题：

### 屏幕自适应是如何实现的？

一开始问到这个问题我是有点懵的，直接想到的是 UGUI 里`Canvas`的自适应渲染，就说只要把`Canvas`调整为`Screen Space`就可以。果然面试官追问我，怎么通过代码实现？这个时候我才懂了面试官的意思，联系之前 uwp 开发的经验不太确定的回答了，大致就是需要使用游戏引擎提供的 API 或者是调用系统的接口获得设备的屏幕分辨率，根据分辨率进行缩放就可以。回来查了一下在中可以使用`UnityEngine` 中 `Screen`来实现。

### 一个游戏引擎需要实现哪些功能？

游戏引擎包含以下系统：**渲染引擎（即“渲染器”，含二维图像引擎和三维图像引擎）、物理引擎、碰撞检测系统、音效、脚本引擎、电脑动画、人工智能、网络引擎以及场景管理。**面试时答得并不是很好，只提到了其中几个点，庆幸的是没有犯常识性和方向性的错误。

### 如果让你来选择一个游戏引擎，你会考虑那些问题？

非技术的问题应该就是见仁见智了，感觉主要还是在考对游戏引擎的理解。由于并没有真正地参与过大型项目，就只凭着常识水了几点，大概就是：引擎的性能优化、画质的支持、平台兼容性、使用什么语言开发、符不符合当前团队的技术栈、学习成本有多高这几点。其实可以提到的还有很多：例如开发手段是否友好便捷(支持可视化脚本)、第三方插件数量、性能分析工具、是否支持 VR 等等。

另外也有很多回答同样都是很开放的问题：“不给你任何数据，你要怎么判断一款游戏当前的收入？”，“比较一下 unity3D 与 cocos2dx”等等。

## 面试体会

1. 笔试的手写代码其实**不用过分的纠结于一些细节**，最重要的是把你的想法用语言与注释明确地表达出来，具体的代码实现细节并不会有太大的影响，当然保持最基本的代码风格和整洁度，以及规范的变量命名是必要的。
2. 逻辑题的答案，尽量用**表格、分点列举**的形式有条理的表述你的答案。除了便于面试官理解，也便于自己的纠错和梳理。
3. 技术面试，答案明确的话就直接一步到位直接点题，如果自己并没有什么把我，可以先询问一下面试官这个问题是不是自己所理解的那样，然后通过**联系一些相关的开发经历**去回答，**尝试获取和认真把握面试官的引导**尤为重要。如果实在完全不懂，就直接告诉面试官自己这方面了解不足，**不懂装懂是大忌**。
4. 平时可以多整理一些各大公司的面试真题，总会有用的。
5. **项目经历以及熟悉自己的项目很重要。**不一定是要很难、完整性很高的项目，但是项目中的每个技术细节你都要了解，尤其是要能准确地表达出“在这个项目中，你用到(学会)了什么技术？”这个问题。

## 后记

面试完没过多久人事部的同事就联系我了，说笔试面试的表现都很不错，但是两个月的实习时间太短，问我是否确定只能实习两个月。虽然很希望能在网易游戏工作，但是也确实没办法保证更长的实习时间，所以还是遗憾地没能留住这次宝贵的实习机会~虽然这次没能在网易游戏实习，但是面试获得的经验还是很让我成长的，而且整个面试过程也是很开心的。一是网易游戏的氛围与环境给人的感觉很舒适，和 HR 小姐姐的交流中也能感觉到在这里工作是件比较愉悦的事；二是技术氛围很好，接触的两个面技术的面试官给人的感觉都是技术很成熟，而且没有什么技术架子。面试过程中许多问题都会尽量引导，面试完之后还送了我一程，很 nice。希望以后有机会能在网易游戏工作~